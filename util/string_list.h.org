#ifndef STRING_LIST_H
#define STRING_LIST_H

class string_list {
	public:
		// Constructors.
		string_list(bool sorted = true);
		string_list(unsigned index_allocation, unsigned data_allocation, bool sorted = true);

		// Destructor.
		virtual ~string_list();

		// Sorted?
		bool sorted() const
		{
			return _M_sorted;
		}

		// Clear.
		virtual void clear();

		// Reset.
		virtual void reset();

		// Get count.
		size_t count() const
		{
			return _M_used;
		}

		// Exists.
		virtual bool exists(const char* string) const;
		virtual bool exists(const char* string, size_t len) const;

		// Get at.
		virtual const char* get_at(unsigned idx, size_t* len = NULL) const;

		// Insert.
		virtual bool insert(const char* string);
		virtual bool insert(const char* string, size_t len);

		// Remove.
		virtual bool remove(const char* string);
		virtual bool remove(const char* string, size_t len);

	protected:
		static const size_t DEFAULT_INDEX_ALLOCATION;
		static const size_t DEFAULT_DATA_ALLOCATION;

		static const size_t MAX_DATA_LOST;

		size_t _M_index_allocation;
		size_t _M_data_allocation;

		bool _M_sorted;

		struct index {
			size_t string;
			size_t len;
		};

		index* _M_index;
		size_t _M_size;
		size_t _M_used;

		struct data {
			char* data;
			size_t size;
			size_t used;
			size_t lost;
		};

		data _M_data;

		bool search(const char* string, size_t len, size_t& position) const;

		bool allocate();
		bool allocate_data(size_t len);

		bool defrag();
};

#endif // STRING_LIST_H
